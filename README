# Project: Multi-Tenant Docker Provisioner

A fully automated, on-demand platform for creating and managing temporary, isolated demo instances of the Any Laravel application.

## Table of Contents
1.  [Project Overview](#1-project-overview)
2.  [Prerequisites](#2-prerequisites)
3.  [Part I: Initial VM and Docker Setup](#3-part-i-initial-vm-and-docker-setup)
4.  [Part II: Traefik Reverse Proxy Setup](#4-part-ii-traefik-reverse-proxy-setup)
5.  [Part III: App Demo Provisioning Scripts](#5-part-iii-app-demo-provisioning-scripts)
6.  [Part IV: Usage and Instance Management](#6-part-iv-usage-and-instance-management)
7.  [Part V: Automation Setup](#7-part-v-automation-setup)
8.  [Appendix A: Application Configuration & Gotchas](#appendix-a-application-configuration--gotchas)
9.  [Appendix B: Application Docker Image Setup](#appendix-b-application-docker-image-setup)

---

## 1. Project Overview

This system is designed to be triggered by an external system (like WHMCS) to provide potential customers with a personal demo environment.

### Key Components
*   **Docker:** All services (application, database) are containerized for isolation and easy management.
*   **Traefik:** Acts as a reverse proxy, automatically routing traffic to new demo instances based on a unique subdomain (e.g., `instance-name.docker.frontech.om`).
*   **Shell Scripts:** A suite of scripts handles the entire lifecycle of an instance: creation, teardown, and cleanup.
*   **Cron:** A cron job automates the cleanup process, destroying instances after a predefined lifetime (e.g., 24/48 hours).

---

## 2. Prerequisites

Before starting, ensure you have the following:

1.  **A Clean Virtual Machine:** A server running a modern Linux distribution. This guide assumes **Ubuntu 22.04 LTS**.
2.  **A Domain Name:** You must own a domain name (e.g., `docker.frontech.om`) that you can manage DNS for.
3.  **DNS Provider Access:** You need the ability to add `A` records.
4.  **Application Docker Image:** A working Docker image of the application pushed to a container registry

---

## 3. Part I: Initial VM and Docker Setup

These steps prepare the server for our system.

1.  **Update the System:**
    ```bash
    sudo apt-get update && sudo apt-get upgrade -y
    ```

2.  **Install Docker Engine & Compose:**
    ```bash
    # Install prerequisite packages
    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

    # Add Docker's official GPG key
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    # Set up the stable repository
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    # Install Docker Engine and Compose
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    ```

3.  **Add Your User to the `docker` Group (Optional but Recommended):**
    This allows you to run `docker` commands without `sudo`.
    ```bash
    sudo usermod -aG docker ${USER}
    # You will need to log out and log back in for this change to take effect.
    newgrp docker
    ```

---

## 4. Part II: Traefik Reverse Proxy Setup

This is a one-time setup for the "traffic cop" of our system.

1.  **Set Up DNS Records:**
    In your DNS provider, create two `A` records pointing to your VM's public IP address:
    *   **Record 1 (Main Domain):** Host: `docker.frontech.om`, Value: `[Your VM's IP]`
    *   **Record 2 (Wildcard):** Host: `*`, Value: `[Your VM's IP]`

2.  **Create Traefik Configuration Files:**
    Create a directory for Traefik, e.g., `/opt/traefik`, and create the following three files within it.
    
    **`docker-compose.yml`**
    ```yaml
    version: '3.8'

    services:
      traefik:
        image: "traefik:latest"
        container_name: "traefik-proxy-controller"
        restart: unless-stopped
        ports:
          - "80:80"
          - "443:443"
          - "8080:8080" # Dashboard
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
          - "./traefik.yml:/traefik.yml:ro"
          - "./acme.json:/acme.json"
        networks:
          - traefik-proxy

    networks:
      traefik-proxy:
        name: traefik-proxy
    ```

    **`traefik.yml`** (Static Configuration)
    ```yaml
    entryPoints:
      web:
        address: ":80"
      websecure:
        address: ":443"

    providers:
      docker:
        exposedByDefault: false
        network: traefik-proxy

    api:
      dashboard: true
      insecure: true # Accessible at http://<your_ip>:8080
    ```

    **`acme.json`** (For SSL certificates, must exist but can be empty)
    ```bash
    touch acme.json
    chmod 600 acme.json # Set correct permissions
    ```

3.  **Start Traefik:**
    From within the `/opt/traefik` directory, run:
    ```bash
    docker-compose up -d
    ```

4.  **Verify Traefik:**
    *   Check that the container is running: `docker ps`
    *   Access the dashboard in your browser: `http://<Your_VM_IP>:8080`

---

## 5. Part III: App Demo Provisioning Scripts

These are the core scripts that manage the instance lifecycle. The recommended location is `/opt/[app-name]/`.

1.  **Create Script Directory and Files:**
    ```bash
    mkdir /opt/[app-name]
    cd /opt/[app-name]
    ```
    Create the following files and paste the correct code into them:
    *   `setup_instance.sh`
    *   `teardown_instance.sh`
    *   `cleanup_expired_instances.sh`
    *   `list_instances.sh` (optional helper)
    *   `extend_instance.sh` (optional helper)

2.  **Make Scripts Executable:**
    ```bash
    chmod +x *.sh
    ```

---

## 6. Part IV: Usage and Instance Management

### Creating an Instance
To create a new demo instance, run the setup script with a unique instance name.
```bash
# Usage: ./setup_instance.sh <instance-name>
cd /opt/[app-name]
./setup_instance.sh customer-alpha